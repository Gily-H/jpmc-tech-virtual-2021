From 97ff5dadd42c28fb70bbdac8296ca372617f4f34 Mon Sep 17 00:00:00 2001
From: Gilman Huang <gilman.huang213@gmail.com>
Date: Thu, 27 May 2021 15:10:16 -0400
Subject: [PATCH] updated App.tsx and Graph.tsx to include updating chart

---
 datafeed/server3.py |  2 +-
 src/App.tsx         | 31 +++++++++++++++++++++++++------
 src/DataStreamer.ts |  3 ++-
 src/Graph.tsx       | 12 +++++++++---
 4 files changed, 37 insertions(+), 11 deletions(-)

diff --git a/datafeed/server3.py b/datafeed/server3.py
index 2de4e28..63a14bd 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -202,7 +202,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8085):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..de0d318 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,9 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+
+  // added state variable to toggle graph view
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +25,9 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+
+      // hide graph view when component first created
+      showGraph: false,
     };
   }
 
@@ -29,18 +35,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+
+    // data collected over an interval create self-updating graph
+    let x = 0;
+    const interval = setInterval(() => { 
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState ({ 
+          data: serverResponds, 
+          showGraph: true,
+        })
+    })
+    x++ 
+    if (x > 1000) {
+      clearInterval(interval)
+    }
+
+    }, 100);
   }
 
   /**
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..eaeed04 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -15,7 +15,8 @@ export interface ServerRespond {
 
 class DataStreamer {
   // The url where datafeed server is listening
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  // changed localhost from 8008 to 8085
+  static API_URL: string = 'http://localhost:8085/query?id=1';
 
   /**
    * Send request to the datafeed server and executes callback function on success
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..12f7a63 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,7 +47,13 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
+      // assign graph properties: timestamp x top_ask_price
+      // aggregate duplicate values
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock":"distinct count", "top_ask_price":"avg", "top_bid_price":"avg","timestamp":"distinct count"}');
       elem.load(this.table);
     }
   }
-- 
2.29.1.windows.1

